// Generated by CoffeeScript 1.10.0
var app, config, express, expressHandlebars, fs, server, sortByIncidence, soundcloud, url,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

console.log("Initializing.");

express = require('express');

expressHandlebars = require('express-handlebars');

url = require('url');

fs = require('fs');

config = JSON.parse(fs.readFileSync("./config.json"));

soundcloud = require('./lib/soundcloud');

soundcloud.setApiKey(config.clientId);

app = express();

app.engine('handlebars', expressHandlebars({
  defaultLayout: 'main'
}));

app.set('view engine', 'handlebars');

app.use(express["static"]('static'));

app.get("/", function(req, res) {
  var page;
  page = {};
  page.title = "SoundVane";
  return res.render('home', page);
});

app.get("/url/*", function(req, res) {
  var link, page, soundcloudUrl;
  link = url.parse(req.originalUrl);
  soundcloudUrl = link.pathname.substr(5);
  page = {};
  console.log("stopit");
  return soundcloud.getIdRecsList(soundcloudUrl).then(function(results) {
    console.log(appearanceSort( results ));
    page.tracks = appearanceSort(results);
    if (link.host !== "soundcloud.com") {
      page.title = "Whoops.";
    } else {
      page.title = "Recommendations";
    }
    console.log(page);
    return res.render('recommendations', page);
  });
});

appearanceSort = function (arr) {

	// creates arrays/objects
	counts = {};
	sorted = [];
	final = [];

	// put occurrences of numbers in an object (number; value)

	for (var i in arr) {
		counts[arr[i]] = (counts[arr[i]] || 0) + 1;
	}

	console.log('counts: ' + JSON.stringify(counts));

	// add object to array of arrays

	for (var id in counts) {
		sorted.push([id, counts[id]]);
	}

	// sort array by count of number

	sorted.sort(function(a, b) {return b[1]-a[1];});

	console.log('sorted: ' + JSON.stringify(sorted));

	for (i = 0; i < sorted.length; i++) {
		final.push(sorted[i][0]);
	}

	console.log('final: ' + final);

	return final;

};


/*
var frequency = {}, value;
for(var i = 0; i < array.length; i++) {
    value = array[i];
    if(value in frequency) {
        frequency[value]++;
    }
    else {
        frequency[value] = 1;
    }
}

var unique = [];
for(value in frequency) {
    unique.push(value);
}

function compareTo(a, b) {
    return frequency[b] - frequency[a];
}
 */

app.get("/about", function(req, res) {
  var page;
  page = {};
  page.title = "About Us";
  return res.render('about', page);
});

server = app.listen(9001, function() {
  var host, port;
  host = server.address().address;
  return port = server.address().port;
});
