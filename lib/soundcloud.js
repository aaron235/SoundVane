'use strict';
// Generated by CoffeeScript 1.10.0
var clientID, getJSON, getTrackIDCallback, getTracksId, https, url;

var https = require('follow-redirects').https,
url = require('url'),
q = require( 'q' );

clientID = "";

module.exports = {
	setApiKey: function(ApiKey) {
		return clientID = ApiKey;
	},
	getIdRecsList: function(playlistUrl) {
		var d = q.defer(),
			relatedReqPromises = [];

		getTracksIds( playlistUrl ).then(function( trackIDs ) {

				// for each track, make a promise for its requests

				trackIDs.map( ( trackId ) => {
					console.log( "MApping over track IDs!");
					relatedReqPromises.push(getRelatedTracksForTrackId(trackId));
				});
				q.all(relatedReqPromises).then((listOfRelatedTrackIds) => {
					var result = [];
					console.log( "Here!", listOfRelatedTrackIds );
					listOfRelatedTrackIds.map( ( trackList ) => {
						trackList.map( ( trackId ) => {
							result.push(trackId);
							console.log( trackId );
						} );
					} );
					d.resolve(result);
				});
			});
		return d.promise;
	}

};
// returns a promise for related track ids
function getRelatedTracksForTrackId(trackId) {
	var d = q.defer(),
		relatedTrackIDs = [];
		console.log( "Beginning of getRelatedTracksForTrackId" );
		https.get("https://api-v2.soundcloud.com/tracks/" + trackId + "/related", function(res) {
			var body = '';
			res.on( 'data', function( chunk ) {
				body += chunk;
			});
			res.on( 'end', () => {
				JSON.parse( body.toString() ).collection.map( (track) => {
					relatedTrackIDs.push( track.id );
				});
				console.log( "Done adding related tracks" );
				d.resolve(relatedTrackIDs);
			});
		});
	return d.promise;
}

function getTracksIds(playlistUrl) {

	var d = q.defer();
	var trackIDs = [];
	console.log("https://api.soundcloud.com/resolve.json?client_id=" + clientID + "&url=" + encodeURIComponent(playlistUrl));
	https.get("https://api.soundcloud.com/resolve.json?client_id=" + clientID + "&url=" + encodeURIComponent(playlistUrl), function(res) {
		var body = '';
		res.on( 'data', function( chunk ) {
			body += chunk;
		});
		res.on( 'end', () => {
			JSON.parse( body.toString() ).tracks.map( (el) => {
				trackIDs.push( el.id );
			});
			d.resolve( trackIDs );
		});
	});

	return d.promise;
};

function getJSON(trackID) {
	return https.get(url, function(res) {
		var body;
		body = '';
		res.on('data', function(chunk) {
			return body += chunk;
		});
		return res.on('end', function() {
			return JSON.parse(body);
		});
	}).on('error', function(e) {
		return console.log("Got an error: ", e);
	});
};

function $http(url){

	// A small example of object
	var core = {

		// Method that performs the ajax request
		ajax : function (method, url, args) {

			// Creating a promise
			var promise = new Promise( function (resolve, reject) {

				// Instantiates the XMLHttpRequest
				var client = new XMLHttpRequest();
				var uri = url;

				if (args && (method === 'POST' || method === 'PUT')) {
					uri += '?';
					var argcount = 0;
					for (var key in args) {
						if (args.hasOwnProperty(key)) {
							if (argcount++) {
								uri += '&';
							}
							uri += encodeURIComponent(key) + '=' + encodeURIComponent(args[key]);
						}
					}
				}

				client.open(method, uri);
				client.send();

				client.onload = function () {
					if (this.status >= 200 && this.status < 300) {
						// Performs the function "resolve" when this.status is equal to 2xx
						resolve(this.response);
					} else {
						// Performs the function "reject" when this.status is different than 2xx
						reject(this.statusText);
					}
				};
				client.onerror = function () {
					reject(this.statusText);
				};
			});

			// Return the promise
			return promise;
		}
	};

	// Adapter pattern
	return {
		'get' : function(args) {
			return core.ajax('GET', url, args);
		},
		'post' : function(args) {
			return core.ajax('POST', url, args);
		},
		'put' : function(args) {
			return core.ajax('PUT', url, args);
		},
		'delete' : function(args) {
			return core.ajax('DELETE', url, args);
		}
	};
};
/*
getTrackIDCallback = function(trackID) {
	return https.get("https://api-v2.soundcloud.com/tracks/" + trackID + "/related", function(res) {
		var body;
		console.log("HTTP REQUEST");
		body = '';
		return res.on('data', function(chunk) {
			return body += chunk;
		}, res.on('end', function() {
			return JSON.parse(body.toString()).collection.map(function(el) {
				console.log(el.id);
				return el.id;
			});
		}));
	});
}; */
